Title: Overloading the Minus Operator (-) in CustomList<T>: 
public static CustomList<T> operator -(CustomList<T> firstList, CustomList<T> secondList)

Definition:
Overloads the minus operator (-) for the CustomList<T> class. 
This operator is used to subtract elements in secondList from firstList. 
The method checks the type of the elements in firstList and if the type is string, int, or double, 
the method creates a new list (tempList) and adds all elements from firstList to it. 
Then it removes elements from tempList that also exist in secondList. 
If the type is not string, int, or double, it returns null.

Parameters:

firstList (CustomList<T>): The list from which elements are to be subtracted.
secondList (CustomList<T>): The list containing the elements to be subtracted from the first list.

Returns:

Returns a new CustomList<T> (tempList) which contains elements from firstList excluding those which are also in secondList.
If the type of the elements in firstList is not string, int, or double, returns null.

Implements:

The method uses a foreach loop to add all elements from firstList to a new list (tempList), 
then uses a for loop to remove elements from secondList from tempList.

Examples:

CustomList<int> list1 = new CustomList<int> {1, 2, 3, 4};
CustomList<int> list2 = new CustomList<int> {2, 4};
CustomList<int> result = list1 - list2;
// result is now {1, 3}

CustomList<string> list3 = new CustomList<string> {"apple", "banana", "cherry"};
CustomList<string> list4 = new CustomList<string> {"banana"};
CustomList<string> result2 = list3 - list4;
// result2 is now {"apple", "cherry"}

Remarks:

This operator overload provides an easy and intuitive way to perform set subtraction operations on CustomList<T> objects 
where T is either string, int, or double. Be aware that if T is of any other type, the method will return null. 
This is a limitation of the current implementation and may be updated in future versions.




